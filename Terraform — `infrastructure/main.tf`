```hcl
terraform {
  required_version = ">= 1.5.0"
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.50"
    }
    random = {
      source = "hashicorp/random"
      version = "~> 3.6"
    }
  }
}

provider "aws" {
  region = var.aws_region
}

resource "random_id" "suffix" {
  byte_length = 3
}

# ---- S3 bucket for data, scripts, and Athena outputs ----
resource "aws_s3_bucket" "data" {
  bucket = "${var.project}-data-${random_id.suffix.hex}"
}

resource "aws_s3_bucket_public_access_block" "block" {
  bucket                  = aws_s3_bucket.data.id
  block_public_acls       = true
  block_public_policy     = true
  ignore_public_acls      = true
  restrict_public_buckets = true
}

resource "aws_s3_bucket_versioning" "versioning" {
  bucket = aws_s3_bucket.data.id
  versioning_configuration { status = "Enabled" }
}

resource "aws_s3_bucket_server_side_encryption_configuration" "sse" {
  bucket = aws_s3_bucket.data.id
  rule {
    apply_server_side_encryption_by_default { sse_algorithm = "AES256" }
  }
}

# Folder “placeholders” (optional)
resource "aws_s3_object" "folders" {
  for_each = toset([
    "raw/sales/.keep",
    "curated/sales/.keep",
    "scripts/.keep",
    "athena-results/.keep"
  ])
  bucket  = aws_s3_bucket.data.id
  key     = each.key
  content = ""
}

# ---- Glue Data Catalog DB ----
resource "aws_glue_catalog_database" "db" {
  name = "${var.project}_db"
}

# ---- IAM Role for Glue Job ----
data "aws_iam_policy_document" "assume_glue" {
  statement {
    actions = ["sts:AssumeRole"]
    principals {
      type        = "Service"
      identifiers = ["glue.amazonaws.com"]
    }
  }
}
resource "aws_iam_role" "glue_role" {
  name               = "${var.project}-glue-role"
  assume_role_policy = data.aws_iam_policy_document.assume_glue.json
}

data "aws_iam_policy_document" "glue_inline" {
  statement {
    actions = [
      "s3:GetObject","s3:PutObject","s3:ListBucket","s3:DeleteObject"
    ]
    resources = [
      aws_s3_bucket.data.arn,
      "${aws_s3_bucket.data.arn}/*"
    ]
  }
  statement {
    actions   = ["logs:CreateLogGroup","logs:CreateLogStream","logs:PutLogEvents"]
    resources = ["*"]
  }
  statement {
    actions   = ["glue:*","athena:*","s3:ListAllMyBuckets"]
    resources = ["*"]
  }
}

resource "aws_iam_role_policy" "glue_inline" {
  name   = "${var.project}-glue-inline"
  role   = aws_iam_role.glue_role.id
  policy = data.aws_iam_policy_document.glue_inline.json
}

# ---- Upload Glue Script to S3 ----
resource "aws_s3_object" "glue_script" {
  bucket  = aws_s3_bucket.data.id
  key     = "scripts/retail_etl.py"
  content = file("${path.module}/../glue_jobs/retail_etl.py")
}

# ---- Glue Job ----
resource "aws_glue_job" "etl" {
  name        = "${var.project}-retail-etl"
  role_arn    = aws_iam_role.glue_role.arn
  glue_version        = "4.0"
  number_of_workers   = 2
  worker_type         = "G.1X"
  description         = "ETL: raw CSV to curated Parquet partitioned by year/month"
  timeout             = 30

  command {
    name            = "glueetl"
    script_location = "s3://${aws_s3_bucket.data.id}/scripts/retail_etl.py"
    python_version  = "3"
  }

  default_arguments = {
    "--job-language"            = "python"
    "--enable-metrics"          = "true"
    "--enable-continuous-cloudwatch-log" = "true"
    "--RAW_S3_PATH"             = "s3://${aws_s3_bucket.data.id}/raw/sales/"
    "--CURATED_S3_PATH"         = "s3://${aws_s3_bucket.data.id}/curated/sales/"
  }
}

# ---- Optional crawlers (raw and curated) ----
resource "aws_glue_crawler" "raw" {
  name          = "${var.project}-raw-crawler"
  role          = aws_iam_role.glue_role.arn
  database_name = aws_glue_catalog_database.db.name
  s3_target { path = "s3://${aws_s3_bucket.data.id}/raw/sales/" }
  configuration = jsonencode({ Version = 1.0, Grouping = { TableLevelConfiguration = 3 } })
  schedule      = "cron(0 4 * * ? *)" # daily 04:00 UTC
}

resource "aws_glue_crawler" "curated" {
  name          = "${var.project}-curated-crawler"
  role          = aws_iam_role.glue_role.arn
  database_name = aws_glue_catalog_database.db.name
  s3_target { path = "s3://${aws_s3_bucket.data.id}/curated/sales/" }
  configuration = jsonencode({ Version = 1.0, Grouping = { TableLevelConfiguration = 3 } })
}

# ---- Athena Workgroup ----
resource "aws_athena_workgroup" "wg" {
  name = "${var.project}_wg"
  configuration {
    enforce_workgroup_configuration = true
    result_configuration {
      output_location = "s3://${aws_s3_bucket.data.id}/athena-results/"
    }
  }
}
